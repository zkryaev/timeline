version: '3'

dotenv: ['.env']

vars:
  PROJECT_ROOT: /home/${USER}/timeline/
  ENTRYPOINT: cmd/timeline/main.go
  OUTPUT_BINARY: bin/timeline
  LINTER_OUT: linter.out
  APP_LOGS: logs/logs.txt
  SWAGGER_SRC: cmd/timeline/main.go
  SWAGGER_OUT: docs/swagger
  MIGRATION_MASTER_PATH: migrations/master
  MIGRATION_ANALYTICS_PATH: migrations/analytics
  # postgres://<user>:<password>@<host>:<port>/<dbname>?<params>
  MASTER_DSN: "{{.DB}}://{{.DB_USER}}:{{.DB_PASSWD}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode={{.DB_SSLMODE}}"
  ANALYTICS_DSN: "{{.ANALYTICS_DB}}://{{.ANALYTICS_DB_USER}}:{{.ANALYTICS_DB_PASSWD}}@{{.ANALYTICS_DB_HOST}}:{{.ANALYTICS_DB_PORT}}/{{.ANALYTICS_DB_NAME}}?sslmode={{.ANALYTICS_DB_SSLMODE}}"
  TEST_DSN: "postgres://user:passwd@localhost:5555/testdb?sslmode=disable"
  ENVS:
    - CONFIG_PATH
    - DB
    - DB_USER
    - DB_PASSWD
    - DB_HOST
    - DB_PORT
    - DB_NAME
    - DB_SSLMODE
    - MAIL_HOST
    - MAIL_PORT
    - MAIL_USER
    - MAIL_PASSWD
    - SECRET_PATH

tasks:
  dsn:
    desc: "show db connection-url"
    silent: true
    cmds:
      - echo {{.MASTER_DSN}}
      
  migrate-up:
    desc: "migrations [applying...]"
    silent: true
    cmds:
      - go run ./cmd/migrator/main.go --dsn={{.MASTER_DSN}} --migrations-path={{.MIGRATION_MASTER_PATH}} --instance-name=master_db
      - go run ./cmd/migrator/main.go --dsn={{.ANALYTICS_DSN}} --migrations-path={{.MIGRATION_ANALYTICS_PATH}} --instance-name=analytics_db
  
  migrate-down:
    desc: "migrations [reverse...]"
    silent: true
    cmds:
      - migrate -database {{.MASTER_DSN}} -path {{.MIGRATION_MASTER_PATH}} down
      
  check-envs:
    desc: "checks that all required environment variables are set and non-empty"
    silent: true
    cmds:
      - for:
          var: ENVS
        cmd: |
          if [ -z "${{ .ITEM }}" ]; then
            echo "Error: env {{ .ITEM }} isn't set." >&2
            exit 1
          fi
      - echo "All required environment variables are set."

  docker-all:
    desc: "deploy all containers in list"
    cmds:
      - docker-compose up -d

  docker-rm-all:
    desc: "delete containers"
    cmds:
      - docker-compose down

  swagger:
    desc: "generate swagger docs"
    cmds:
      - swag init -g {{.SWAGGER_SRC}} -o {{.SWAGGER_OUT}}

  lint:
    desc: "run GolangCI-Lint and save output to file"
    cmds:
      - golangci-lint run --color=always > {{.LINTER_OUT}}
  
  mocks:
    desc: "generate mocks for every domen"
    cmds:
      - mockery --all --dir ./internal/infrastructure/ --output ./mocks/infrastructure
      - mockery --all --dir ./internal/controller/ --output ./mocks/controller

  img-upload:
    desc: "launch script that make requests to upload images to S3"
    silent: true
    vars:
      API_URL: "http://localhost:8100/v1/media"
      IMAGES_DIR: "internal/controller/s3/test-image"
    cmds:
      - |
        find {{.IMAGES_DIR}} -type f | while IFS= read -r FILE; do
          ENTITY_ID=$(dirname "$FILE" | awk -F/ '{print $(NF-1)}')
          ENTITY=$(dirname "$FILE" | awk -F/ '{print $NF}')

          echo "Uploading $FILE with entity=$ENTITY and entityID=$ENTITY_ID"

          curl -X POST "{{.API_URL}}" \
            -F "entity=$ENTITY" \
            -F "entityID=$ENTITY_ID" \
            -F "file=@$FILE"

          echo "===================================="
        done
  coverage:
    desc: "run tests and show coverage"
    cmds:
      - docker-compose -f docker-test-postgres-compose.yml up -d
      - go run ./cmd/migrator/main.go --dsn={{.TEST_DSN}} --migrations-path={{.MIGRATION_MASTER_PATH}}
      - nohup bash -c 'sleep 30; echo "> stopped:" &> coverage_log.out; docker stop test-postgres; echo "> removed:" &>> coverage_log.out; docker rm test-postgres' &>> coverage_log.out &
      - go test -short -count=1 -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o ./coverage.html
      - rm coverage.out

  test-db:
    desc: "deploy db -> apply migrations -> run repo tests -> remove db"
    silent: true
    cmds:
      - docker-compose -f docker-test-postgres-compose.yml up -d
      - go run ./cmd/migrator/main.go --dsn={{.TEST_DSN}} --migrations-path={{.MIGRATION_MASTER_PATH}}
      #- nohup bash -c 'sleep 4; echo "> stopped:" &> test_db_docker.out; docker stop test-postgres; echo "> removed:" &>> test_db_docker.out; docker rm test-postgres' &>> test_db_docker.out &
      - go test -v -count=1 ./internal/infrastructure/database/postgres
  build:
    silent: true
    cmds:
      - go fmt ./...
      - go build -v -o {{.OUTPUT_BINARY}} {{.ENTRYPOINT}}
  
  run:
    desc: "run application"
    deps: [build]
    cmds:
      - ./{{.OUTPUT_BINARY}}

  debug:
    desc: "run debugger"
    #deps: [check-envs, docker-all, migrate-up]
    cmds:
      - go build -gcflags="all=-N -l" -o bin/timeline ./cmd/timeline/main.go
      - dlv debug --headless --listen=:2345 --api-version=2 ./cmd/timeline

  deploy:
    desc: "deploy app: [envs -> db -> s3 -> migrations -> build -> run]"
    deps: [check-envs, docker-all, migrate-up, build]
    cmds:
      - ./{{.OUTPUT_BINARY}}
      #- nohup bash -c 'sleep 5; task img-upload' &> img_upload_logs.out &

  clean:
    desc: "remove generated swagger docs, binary, and \".out\" files"
    silent: true
    cmds:
      - |
        find "{{.SWAGGER_OUT}}" -mindepth 1 -maxdepth 1 -type f -delete 2>/dev/null || true
        find "{{.SWAGGER_OUT}}" -mindepth 1 -maxdepth 1 -type d -delete 2>/dev/null || true
        find "{{.OUTPUT_BINARY}}" -mindepth 1 -maxdepth 1 -type f -delete 2>/dev/null || true
        find "{{.OUTPUT_BINARY}}" -mindepth 1 -maxdepth 1 -type d -delete 2>/dev/null || true
        find "{{.APP_LOGS}}" -delete 2>/dev/null || true  
        find . -name "*.out" -delete 2>/dev/null || true 
        find . -name "__*" -delete 2>/dev/null || true
        find "coverage.html" -delete 2>/dev/null || true 
        echo "cleanup!"
        
  default:
    cmds: 
      - task -ac
